
/**
 * Write a description of TestCaesarCipher here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class TestCaesarCipher {
    public int maxIndex(int[] values){
        int maxDex = 0;
        for (int i=0; i < values.length; i++) {
            if(values[i] > values[maxDex]){
                maxDex = i;
        }
        }
        return maxDex;
    }
    public int[] countLetters(String encrypted){
        String alph = "abcdefghijklmnopqrstuvwxyz";
        int[] counts = new int[26];
        for (int i=0; i < encrypted.length(); i++){
            char ch = Character.toLowerCase(encrypted.charAt(i));
            int dex = alph.indexOf(ch);
            if (dex != -1){
                counts[dex] ++;
                {
        }
    }
    }
    return counts;
    }
    public void simpleTests(){
    CaesarCipherOne cc = new CaesarCipherOne(18);
    String Lincoln = "government of the people, by the people, for the people, shall not perish from the earth.";
    String encrypted = cc.encrypt(Lincoln);
    System.out.println(encrypted);
    String decrypted = breakCaesarCipher(encrypted);
    System.out.println(decrypted);
    //print the encrypted string
    //decrypt the encrypted string       
    }
    public String breakCaesarCipher(String input){
        //figure out which key was used
        //create CC object with that key
        //return decrypted
        int[] freqs = countLetters(input);
        int maxDex = maxIndex(freqs);
        int dkey = maxDex -4;
        if (maxDex < 4) {
            dkey = 26 - (4-maxDex);
        }
        CaesarCipherOne cc = new CaesarCipherOne(26-dkey);
        return cc.encrypt(input);
    }
    }
