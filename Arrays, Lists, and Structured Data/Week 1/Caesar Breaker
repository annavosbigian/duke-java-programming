import edu.duke.*;
import java.io.*;
/**
 * Write a description of CaesarBreaker here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class CaesarBreaker {
    public String decrypt(String encrypted){
        CaesarCipher cc = new CaesarCipher();
        int[] freqs = countLetters(encrypted);
        int maxDex = maxIndex(freqs);
        int dkey = maxDex -4;
        if (maxDex < 4) {
            dkey = 26 - (4-maxDex);
        }
        return cc.caesar(encrypted, 26-dkey);
    }
    public int maxIndex(int[] values){
        int maxDex = 0;
        for (int i=0; i < values.length; i++) {
            if(values[i] > values[maxDex]){
                maxDex = i;
        }
        }
        return maxDex;
    }
    public int[] countLetters(String encrypted){
        String alph = "abcdefghijklmnopqrstuvwxyz";
        int[] counts = new int[26];
        for (int i=0; i < encrypted.length(); i++){
            char ch = Character.toLowerCase(encrypted.charAt(i));
            int dex = alph.indexOf(ch);
            if (dex != -1){
                counts[dex] ++;
                {
        }
    }
    }
    return counts;
    }
    public void testDecrypt(){
        String Lincoln = "Sbhe fpber naq frira lrnef";
        System.out.println(decrypt(Lincoln));
    }
    public String halfOfString(String message, int start){
        StringBuilder everyOther = new StringBuilder();
        for (int i = start; i < message.length(); i+=2){
            char ch = message.charAt(i);
            everyOther.append(ch);
        }
        return everyOther.toString();
    }
    public void testHalfOfString(){
    String message = "hnwdsmndos ng ugf qdpomd, cx sid ofnqkf, epq sid ofnqkf, rizmk mps ofqjri gqpl sid dbqug.";
    int firstHalf = 0;
    int secondHalf = 1;
    System.out.println(halfOfString(message, firstHalf));
    }
    public int getKey(String s){
    //call countLetters
    //use maxIndex for e
    CaesarCipher cc = new CaesarCipher();
    int[] freqs = countLetters(s);
    int maxDex = maxIndex(freqs);
    int dkey = maxDex - 4;
    if (maxDex < 4) {
        dkey = 26 - (4-maxDex);
    }
    return dkey;
    }
    public String decryptTwoKeys(String encrypted){
    //get the first half of the string
    //get the key
    //repeat for second half of string
    CaesarCipher cc = new CaesarCipher();
    String firstHalf = halfOfString(encrypted, 0);
    int key1 = getKey(firstHalf);
    String secondHalf = halfOfString(encrypted, 1);
    int key2 = getKey(secondHalf);
    return cc.encryptTwoKeys(encrypted, 26-key1, 26-key2);
    }
    public void testDecryptTwoKeys(){
        String test = "hnwdsmndos ng ugf qdpomd, cx sid ofnqkf, epq sid ofnqkf, rizmk mps ofqjri gqpl sid dbqug.";
        System.out.println(decryptTwoKeys(test));
    }
    }
